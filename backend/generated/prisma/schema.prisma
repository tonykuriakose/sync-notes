generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  firstName String
  lastName  String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notes         Note[]             @relation("NoteOwner")
  collaborators NoteCollaborator[]
  presences     UserPresence[]

  @@map("users")
}

model Note {
  id           String   @id @default(cuid())
  title        String
  content      String   @db.Text // Supports both markdown and rich text
  contentType  String   @default("markdown") // "markdown" or "richtext"
  isPublic     Boolean  @default(false)
  ownerId      String
  lastEditedBy String?
  lastEditedAt DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  owner         User               @relation("NoteOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  collaborators NoteCollaborator[]
  presences     UserPresence[]
  versions      NoteVersion[]

  @@map("notes")
}

model NoteCollaborator {
  id         String     @id @default(cuid())
  noteId     String
  userId     String
  permission Permission @default(VIEWER)
  addedAt    DateTime   @default(now())

  // Relations
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([noteId, userId])
  @@map("note_collaborators")
}

model UserPresence {
  id        String   @id @default(cuid())
  userId    String
  noteId    String
  cursorPos Int? // Cursor position in content
  selection Json? // Start and end selection positions
  color     String // User's cursor color for visual distinction
  isActive  Boolean  @default(true)
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@unique([userId, noteId])
  @@map("user_presences")
}

model NoteVersion {
  id        String   @id @default(cuid())
  noteId    String
  title     String
  content   String   @db.Text
  version   Int // Auto-incrementing version number
  createdBy String // User who made this version
  createdAt DateTime @default(now())

  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@unique([noteId, version])
  @@map("note_versions")
}

enum Permission {
  OWNER
  EDITOR // Can edit content
  VIEWER // Can only view
}
